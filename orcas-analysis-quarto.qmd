---
title: "Mapping Orca Encounters in the Pacific Northwest"
author: "Melissa Albino Hegeman"
format: 
  html:
    code-fold: true
    toc: true
    toc-depth: 3
    fig-width: 12
    fig-height: 8
execute:
  warning: false
  message: false
  echo: false
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| label: setup
#| include: false

# Load required libraries
library(tidyverse)
library(lubridate)
library(knitr)
library(ggplot2)
library(sf)
library(leaflet)
library(dplyr)
library(ggthemes)
library(h3jsr)

# Read the CSV file
orcas_data <- read_csv("data/orcas.csv")

# Convert date and time columns to appropriate formats
orcas_data <- orcas_data %>%
  mutate(
    date = ymd(date),
    begin_time = hms(begin_time),
    end_time = hms(end_time)
  ) 
```




## Overview

This data set is from the [#TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2024/2024-10-15/readme.md) project and contains information about orca sightings in the Pacific Northwest. My goals is to start learning to make maps with open source tools - including R. Most of my daily workflow is happening in R anyway, so it makes sense to be able to create maps in R as well. I will be focusing on creating the points, lines, and polygons from the csv file using the sf package and then experiment with leaflet and ggplot2 for visualizing the data. 

## Data Cleaning

I started by cleaning up the data and adding a unique identifier for each row. Several rows with incomplete information were removed from the data set and I only kept the columns that I planned on using. 

```{r}
#| label: data-cleaning

# add a new column for row id 

orcas_clean <- orcas_data |> 
  arrange(date, encounter_number, encounter_sequence) |> 
  mutate(across(where(is.character), toupper),
         row_id = row_number()) |> 
  select(row_id, year, date, encounter_number, encounter_sequence, pods_or_ecotype, ids_encountered, location, begin_latitude, begin_longitude, end_latitude, end_longitude) |> 
  filter(!is.na(begin_latitude) & !is.na(begin_longitude) & !is.na(end_latitude) & !is.na(end_longitude))


```



## Mapping Orca Encounters

Each trip, or row in the data set, has a beginning and ending location. We need to transform the these columns in to point geometries. This is done with the `st_as_sf` function from the `sf` package. Since the data is from a GPS unit, we will be using the WGS84 coordinate reference system (4326). 

```{r}
#| label: make points



begin_points <- st_as_sf(orcas_clean |> 
                           filter(!is.na(begin_longitude) & !is.na(begin_latitude) & !is.na(end_longitude) & !is.na(end_latitude)), 
                         coords = c("begin_longitude", "begin_latitude"),
                         crs = 4326 #WGS84
                         ) |> 
  mutate(point_type = "begin") |> 
  select(row_id, point_type, geometry)

end_points <- st_as_sf(orcas_clean |>
                         filter(!is.na(end_longitude) & !is.na(end_latitude) & !is.na(begin_longitude) & !is.na(begin_latitude)),
                       coords = c("end_longitude", "end_latitude"),
                       crs = 4326 #WGS84
                       ) |> 
  mutate(point_type = "end") |> 
  select(row_id, point_type, geometry)

all_points <- rbind(begin_points, end_points) |> 
  arrange(row_id, point_type)



```

The next step is turning these beginning and ending points into lines by first creating a matrix of the data. That matrix is then used to create the lines in the st_sf function. 


```{r}
#| label: make lines


# Create lines using the geometry columns
lines_list <- lapply(1:nrow(begin_points), function(i) {
  coords <- matrix(
    c(
      st_coordinates(begin_points$geometry)[i, ],  # coordinates of beginning point
      st_coordinates(end_points$geometry)[i, ]     # coordinates of ending point
    ),
    ncol = 2,
    byrow = TRUE
  )
  st_linestring(coords)
})

# Convert list of linestrings to sf object
lines_sf <- st_sf(
  row_id = begin_points$row_id,  # assuming row_id is in your points data
  geometry = st_sfc(lines_list, crs = st_crs(all_points))
)

# rm(begin_points, end_points, lines_list)

```

Lastly, I wanted to calculate the centroids of the lines to be able to plot them on the map. 


```{r}
#| label: create centroids for lines

# Create centroids for the lines
lines_centroids <- st_centroid(lines_sf) |> 
  st_sf() |> 
  mutate(line_id = lines_sf$row_id) |> 
  left_join(orcas_clean |> 
              select(row_id, year),
            by = "row_id") 



```

## Mapping the Data

Even though I want to create some static maps, I decided to use the leaflet package to explore the data in an interactive map. You can visualize all of the data that we've created so far, pan and zoom, and toggle layers on and off. Having this exploratory view is helpful for deciding how to compose the final static map. 

```{r}
#| label: leaflet map

# Load required libraries
library(sf)
library(leaflet)

bbox <- st_bbox(all_points)

# Create leaflet map
leaflet()  |> 
  # Add OSM tiles
  addTiles() |>   
  addPolylines(
    data = lines_sf,
    color = "purple",
    weight = 2,
    opacity = 0.8,
    group = "Lines"
  ) |> 
  addCircleMarkers(
    data = lines_centroids,
    color = "purple",
    radius = 3,
    fillOpacity = 0.7,
    group = "Centroids"
  ) |>
  # Add beginning points
  addCircleMarkers(
    data = begin_points,
    color = "blue",
    radius = 6,
    fillOpacity = 0.7,
    group = "Beginning Points"
  ) |> 
  # Add ending points
  addCircleMarkers(
    data = end_points,
    color = "red",
    radius = 6,
    fillOpacity = 0.7,
    group = "Ending Points"
  ) |> 
  # Add layer control
  addLayersControl(
    overlayGroups = c("Beginning Points", "Ending Points", "Centroids", "Lines"),
    options = layersControlOptions(collapsed = FALSE)
  ) |> 
  # Fit bounds to all points
  fitBounds(
    lng1 = min(st_coordinates(all_points)[,1]),
    lat1 = min(st_coordinates(all_points)[,2]),
    lng2 = max(st_coordinates(all_points)[,1]),
    lat2 = max(st_coordinates(all_points)[,2])
  )
```

I'm going to simplify the analysis by only using the centroids of the lines. I want to look at the location of the encounters by year. 

```{r}
#| label: ggplot map

library(ggspatial)
library(viridis)

# Create the map
ggplot() +
  # Add the basemap
  annotation_map_tile(
    type = "cartolight",
    zoom = 8,
    progress = "none"
  ) +
  # Add centroids
  geom_sf(
    data = lines_centroids,
    aes(color = factor(year),
        fill = factor(year)),
    # color = "#1f77b4", fill = "#08519c",
    size = 1.5,
    alpha = 0.7,
    shape = 21, 
    stroke = 1.2
  ) +
  scale_color_viridis_d(
    option = "plasma", 
    end = 0.9,
    guide = "none"
  ) +
  scale_fill_viridis_d(
    option = "plasma", 
    end = 0.9,
    guide = guide_legend(title = "Year")
  ) +
  # Customize the theme
  theme_map() +
  # Add title and caption
  labs(
    title = "Orca Encounter Locations in the Pacific Northwest",
    subtitle = "Centroids of encounter paths",
    caption = "Data: Orca encounters dataset"
  ) +
  # Fine-tune the theme
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.5),
    plot.caption = element_text(size = 8, hjust = 1),
    plot.margin = margin(15, 15, 20, 20)
  ) +
  # Set coordinate system and limits
  coord_sf(crs = 4326)

# ggsave("images/orca_encounters_map.png", width = 12, height = 8, dpi = 300)
```


## Mapping Encounter Density

Can I map these centroids to the H3 spatial index? 

```{r}
#| label: H3 

points_h3 <- lines_centroids |>
  filter(!st_is_empty(geometry))|> 
  mutate(
    h3_index = point_to_cell(
      geometry, 
      res = 6
      )
    ) 

test_all_years <- points_h3 |>
  group_by(h3_index) |>
  summarize(n = n())

h3_polygons <- cell_to_polygon(test_all_years$h3_index, simple = FALSE) |> 
  st_set_crs(4326) |>
  bind_cols(test_all_years)

ggplot() +
  # Add the basemap with explicit bounds
  annotation_map_tile(type = "cartolight", 
                     zoom = 8,
                     progress = "none") +
  # Add your H3 hexagons
  geom_sf(data = h3_polygons, 
          aes(fill = n, geometry = `geometry...2`), 
          color = "white", 
          linewidth = 0.1,
          alpha = 0.7) +
  scale_fill_viridis_c(option = "plasma",
                       name = "Count") +
  # Limit the plot to our padded bounding box
  coord_sf(xlim = c(bbox[1], bbox[3]),
          ylim = c(bbox[2], bbox[4])) +
  theme_map() +
  theme(
    axis.text = element_text(size = 8),
    legend.position = "right",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  labs(
    title = "H3 Hexagon Distribution",
    x = "Longitude",
    y = "Latitude"
  )
```






